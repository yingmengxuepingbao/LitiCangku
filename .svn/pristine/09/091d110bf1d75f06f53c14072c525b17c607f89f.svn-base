package com.penghaisoft.pda.stereoscopic.controller;

import com.alibaba.fastjson.JSONObject;
import com.penghaisoft.pda.basic.model.PalletInDto;
import com.penghaisoft.pda.basic.model.WmsAddressRealRela;
import com.penghaisoft.pda.basic.service.IWmsAddressRealRelaService;
import com.penghaisoft.pda.common.CommonUtil;
import com.penghaisoft.pda.common.Constant;
import com.penghaisoft.pda.common.IWmsCommonService;
import com.penghaisoft.pda.common.Resp;
import com.penghaisoft.pda.outwarehouse.model.WmsTaskExecutionLog;
import com.penghaisoft.pda.outwarehouse.service.WmsOrderOutStereoscopicService;
import com.penghaisoft.pda.outwarehouse.service.WmsTaskExecutionLogService;
import com.penghaisoft.pda.storage.model.WmsGoods;
import com.penghaisoft.pda.storage.model.WmsPallet;
import com.penghaisoft.pda.storage.service.CommonStorageService;
import com.penghaisoft.pda.storage.service.StereoscopicHandInService;
import com.penghaisoft.pda.storage.service.WmsLocationStereoscopicService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * @Description PDA手动操作立库货物
 * @ClassName StereoscopicHandInController
 * @Author luot
 * @Date 2020/3/11 17:42
 **/
@Slf4j
@RestController
@RequestMapping("stereoscopic/hand")
public class StereoscopicHandInController {

    @Autowired
    private WmsOrderOutStereoscopicService wmsOrderOutStereoscopicService;

    @Autowired
    private WmsLocationStereoscopicService wmsLocationStereoscopicService;

    @Autowired
    private WmsTaskExecutionLogService wmsTaskExecutionLogService;

    @Autowired
    private CommonStorageService commonStorageService;

    @Autowired
    private IWmsCommonService wmsCommonService;

    @Autowired
    private IWmsAddressRealRelaService wmsAddressRealRelaService;

    @Resource
    private StringRedisTemplate stringRedisTemplate;

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private StereoscopicHandInService handInService;

    @Value("${notice.other-sys-addr.pallet-in}")
    private String noticePalletInAddr;

    /**
     * @return
     * @Description 立库手动入库【异常口入库】
     * @Author luot
     * @Date 2020/3/11 17:42
     * @Param
     **/
    @PostMapping("inwarehouse")
    public JSONObject handInSubmit(@RequestHeader("account") String account, @RequestHeader("areaCode") String areaCode, @RequestBody JSONObject param) {
        JSONObject result = null;
        log.info("接收成功============================");
//        托盘码
        String palletCode = param.getString("palletCode");

//        入库口地址【当前位置】
        String inAddress = param.getString("inAddress");
        Integer realAddress = 0;

        if (palletCode == null || "".equals(palletCode)) {
            result = CommonUtil.genErrorResult("请输入/扫描托盘码");
            return result;
        }

        if (inAddress == null || "".equals(inAddress)) {
            result = CommonUtil.genErrorResult("请选择当前位置");
            return result;
        }else{
//            将入库口地址转换成物理地址
            WmsAddressRealRela searchOb = new WmsAddressRealRela();
            searchOb.setAddressCode(inAddress);
            List<WmsAddressRealRela> addressList = wmsAddressRealRelaService.queryByAddressCode(searchOb);
            if(addressList != null && !addressList.isEmpty()){
                realAddress = addressList.get(0).getRealAddress();
            }
        }

        List<WmsPallet> palletList = wmsLocationStereoscopicService.queryWmsPallet(palletCode);
        if(palletList != null && !palletList.isEmpty()){
            WmsPallet wmsPallet = palletList.get(0);
            if(wmsPallet.getGoodsCode() == null || "".equals(wmsPallet.getGoodsCode())){
                result = CommonUtil.genErrorResult("当前托盘未绑定");
                return result;
            }
        }

        String key = Constant.ConfigInfo.INTERFACE_FOR_WCS_REDIS + palletCode;
        if (stringRedisTemplate.hasKey(key)) {
            result = CommonUtil.genErrorResult("当前托盘码正在处理中");
            return result;
        } else {
            stringRedisTemplate.opsForValue().set(key, "1", Constant.ConfigInfo.INTERFACE_FOR_WCS_REDIS_LOST_MINUTES, TimeUnit.MINUTES);//写入对象，并设置失效时间
        }

        String targetLocation = "";
//        增加异常处理，如果托盘被锁定的库位上的托盘就是自己可以直接入到该库位【待确认】
        targetLocation = wmsLocationStereoscopicService.queryRecommendLocationCodeCheck(palletCode);
        if("".equals(targetLocation)){
            Resp resp = wmsLocationStereoscopicService.queryRecommendLocationCode(palletCode);
            if ("0".equals(resp.getCode())) {
                stringRedisTemplate.delete(key);//删除对象
                result = CommonUtil.genErrorResult("获取推荐库位失败：" + resp.getMessage());
                return result;
            } else {
                targetLocation = (String) resp.getData();
            }
        }

        Date now = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
        long taskId = wmsCommonService.getTaskIds(Constant.TaskType.HAND_IN, 1)[0];
        WmsTaskExecutionLog wmsTaskExecutionLog = new WmsTaskExecutionLog();
        wmsTaskExecutionLog.setAreaCode(areaCode);
//            任务类型 1 生产入库 2 分拣入库 3 移库 4 出库 5越库 6托盘入库
        wmsTaskExecutionLog.setTaskType(String.valueOf(Constant.TaskType.HAND_IN.getTaskType()));
        wmsTaskExecutionLog.setPalletCode(palletCode);
//            入库口地址
        wmsTaskExecutionLog.setInAddress(String.valueOf(realAddress));
//            任务状态1创建2执行3完成4异常5取消6创建失败
        wmsTaskExecutionLog.setTaskStatus("1");
//        List<WmsPallet> palletList = wmsLocationStereoscopicService.queryWmsPallet(palletCode);
        if(palletList != null && !palletList.isEmpty()){
            wmsTaskExecutionLog.setGoodsCode(palletList.get(0).getGoodsCode());
            wmsTaskExecutionLog.setBatchNo(palletList.get(0).getBatchNo());
        }
        wmsTaskExecutionLog.setCreateBy(account);
        wmsTaskExecutionLog.setGmtCreate(now);
        wmsTaskExecutionLog.setActiveFlag("1");
        wmsTaskExecutionLog.setTaskId(taskId);
//        wmsTaskExecutionLog.setOrderNo(orderNo);
        wmsTaskExecutionLog.setLocationCode(targetLocation);

        try {
            PalletInDto palletInDto = new PalletInDto();
            palletInDto.setTaskId(taskId);
            palletInDto.setTaskType(String.valueOf(Constant.TaskType.HAND_IN.getTaskType()));
//            目标库位
            palletInDto.setTargetLocation(Integer.parseInt(targetLocation));
//            入口path
            palletInDto.setFromAddress(realAddress);
            palletInDto.setPalletCode(palletCode);
            palletInDto.setOperator(account);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<PalletInDto> request = new HttpEntity<PalletInDto>(palletInDto, headers);

//                          调用wcs接收出库指令接口
            ResponseEntity<JSONObject> wcsResp = restTemplate.postForEntity(noticePalletInAddr, request, JSONObject.class);
            if (wcsResp.getStatusCodeValue()!=200){
                log.error("调wcs接口失败！");
//                库位状态回滚成初始状态0可用
                wmsLocationStereoscopicService.revertLocationStatus0(targetLocation);
                result = CommonUtil.genErrorResult("启动失败，获取推荐库位成功，调用WCS入库接口失败;");
                stringRedisTemplate.delete(key);//删除对象
                return result;
            }else {
                JSONObject noticeResult = wcsResp.getBody();
//                              状态码：1成功 0 本次下达失败
                if (noticeResult.getString("code").equals("1")){
                    log.info("调wcs接口成功！");
                }else {
                    log.error("调wcs接口失败：" + noticeResult.getString("message"));
//                    库位状态回滚成初始状态0可用
                    wmsLocationStereoscopicService.revertLocationStatus0(targetLocation);
                    result = CommonUtil.genErrorResult("启动失败，获取推荐库位成功，调用WCS入库接口失败;" + noticeResult.getString("message"));
                    stringRedisTemplate.delete(key);//删除对象
                    return result;
                }
            }

//            创建入立体库的指令任务、更新托盘状态
            wmsTaskExecutionLogService.inStereoscopicTaskCreate(wmsTaskExecutionLog);
        } catch (Exception e) {
//            库位状态回滚成初始状态0可用
            wmsLocationStereoscopicService.revertLocationStatus0(targetLocation);
            result = CommonUtil.genErrorResult("启动失败，获取推荐库位成功，调用WCS入库接口失败;");
            stringRedisTemplate.delete(key);//删除对象
            return result;
        }

        stringRedisTemplate.delete(key);//删除对象
        result = CommonUtil.genSucessResultWithData(null);
        return result;
    }

    /**
     * 诺华手动入立库功能
     * @param param
     * @return
     */
    @PostMapping("inwarehouse/product")
    public JSONObject handIn(@RequestBody JSONObject param){
        //获取托盘码
        String palletCode = param.getString("palletCode");
        //获取物料编码
        String materialsCode = param.getString("materialsCode");

        JSONObject result = null;
        WmsGoods goodInfo = commonStorageService.queryGoodInfoByCode(materialsCode);
        if (null==goodInfo){
            result = CommonUtil.genErrorResult("商品不存在！");
            return result;
        }
        WmsPallet pallet = commonStorageService.queryPalletInfoByCode(palletCode);
        if (null==pallet){
            result = CommonUtil.genErrorResult("托盘未维护！");
            return result;
        }
//        已绑定校验
        if (!commonStorageService.isEmptyPallet(pallet)){
            result = CommonUtil.genErrorResult("该托盘已绑定物料信息，请更换托盘");
            return result;
        }
        try {
            JSONObject jsonObject=handInService.startTask(param);
            if(jsonObject==null){
                result = CommonUtil.genErrorResult("任务下发失败！");
            }
            else{
                if("0".equals(jsonObject.getString("resStat"))){
                    result = CommonUtil.genErrorResult(jsonObject.getString("resTaskReport"));
                }
                else{
                    result = CommonUtil.genErrorResult("任务下发失败！");
                }
            }
        }catch (Exception e){
            result = CommonUtil.genErrorResult("任务下发失败！");
        }

        return result;
    }

    /**
     *诺华手动出立库功能
     */
    @PostMapping("out")
    public JSONObject handOut(@RequestBody JSONObject param){

        log.info("接收到手动出立库任务："+param);

        JSONObject result=null;

        try{
            JSONObject jsonObject=handInService.outTask(param);
            if(jsonObject==null){
                result = CommonUtil.genErrorResult("请求失败");
            }
            else{
                result = CommonUtil.genErrorResult(jsonObject.getString("resOutbound"));
            }
        }catch (Exception e){
            result = CommonUtil.genErrorResult(e.toString());
        }


        return result;
    }

}
